{"mappings":"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","sources":["<anon>","src/main.js","../src/index.ts","../src/event.ts","../src/layout/index.ts","../src/layout/matrix.ts","src/input.json"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nclass $8743a11bd21c9c5c$export$4617fb02663045ef {\n    constructor(x, y, width, height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n}\nclass $8743a11bd21c9c5c$export$8c6ed5c666ac1360 {\n    constructor(event){\n        this.event = event;\n        this.rows = 0;\n        this.cols = 0;\n        this.rectangle = new $8743a11bd21c9c5c$export$4617fb02663045ef(0, $8743a11bd21c9c5c$export$8c6ed5c666ac1360.minute(event.start), 0, $8743a11bd21c9c5c$export$8c6ed5c666ac1360.difference(event.start, event.end));\n    }\n    draw(fn) {\n        return fn(this);\n    }\n    overlaps(other) {\n        return this.rectangle.x < other.rectangle.x + other.rectangle.width && this.rectangle.x + this.rectangle.width > other.rectangle.x && this.rectangle.y < other.rectangle.y + other.rectangle.height && this.rectangle.y + this.rectangle.height > other.rectangle.y;\n    }\n    static difference(start, end) {\n        return (end.getTime() - start.getTime()) / 1000 / 60;\n    }\n    static minute(date) {\n        return (date.getHours() * 60 + date.getMinutes()) % 1440;\n    }\n}\nclass $8743a11bd21c9c5c$export$e1aef45b828286de {\n    constructor(width, height, events, fn){\n        this.events = events;\n        this.width = width;\n        this.height = height;\n        this.instance = fn(this.width, this.height, this.events);\n    }\n    draw(fn) {\n        this.instance.process().forEach((slot)=>slot.draw(fn));\n    }\n}\n\n\n\nconst $73dcc39c6e7bc2af$var$rows = 1440;\nclass $73dcc39c6e7bc2af$export$5b12bf1653c0dd85 {\n    constructor(events, width){\n        this.events = events;\n        this.width = width;\n        this.width = width;\n        this.slots = events.map((e)=>{\n            return {\n                ...e,\n                start: new Date(e.start),\n                end: new Date(e.end)\n            };\n        }).sort((e1, e2)=>e1.start.getTime() - e2.start.getTime()).sort((e1, e2)=>e1.end.getTime() - e2.end.getTime()).map((e)=>new (0, $8743a11bd21c9c5c$export$8c6ed5c666ac1360)(e));\n        this.matrix = this.#createMatrix($73dcc39c6e7bc2af$var$rows, this.slots.length);\n    }\n    process() {\n        this.slots.forEach((slot, i)=>this.#initMatrix(this.matrix, slot, i));\n        this.#setColumns();\n        this.#setVerticalPosition();\n        return this.slots;\n    }\n    #createMatrix(rows, cols) {\n        const matrix = [];\n        for(let i = 0; i < rows; i++){\n            matrix[i] = [];\n            for(let j = 0; j < cols; j++)matrix[i][j] = null;\n        }\n        return matrix;\n    }\n    #initMatrix(matrix, slot, i) {\n        const startDate = (0, $8743a11bd21c9c5c$export$8c6ed5c666ac1360).minute(slot.event.start);\n        const endDate = (0, $8743a11bd21c9c5c$export$8c6ed5c666ac1360).minute(slot.event.end);\n        slot.rows = endDate - startDate;\n        for(let t = startDate; t < endDate; t++)matrix[t][i] = slot;\n    }\n    #setColumns() {\n        let maxCol = 0;\n        for(let i = 0; i < this.matrix.length; i++){\n            let count = this.matrix[i].filter((cell)=>cell !== null).length;\n            this.matrix[i].filter((slot)=>slot !== null).forEach((slot)=>slot.cols = Math.max(slot.cols, count));\n            if (count > maxCol) maxCol = count;\n            count = 0;\n        }\n        return maxCol;\n    }\n    #setVerticalPosition() {\n        this.matrix.forEach((slots, i)=>{\n            let x = 0;\n            slots.filter((slot)=>slot !== null).forEach((slot)=>{\n                slot.rectangle.x = Math.max(x, slot.rectangle.x);\n                slot.rectangle.width = this.width / slot.cols;\n                x += slot.rectangle.width;\n            });\n        });\n        this.#avoidOverlap();\n    }\n    #avoidOverlap() {\n        const rows = this.matrix.length;\n        const cols = this.matrix[0].length;\n        for(let i = 0; i < rows; i++)for(let j = 0; j < cols; j++){\n            const slot = this.matrix[i][j];\n            if (slot) {\n                let x = slot.rectangle.x;\n                let width = slot.rectangle.width;\n                // Check if the current slot overlaps with any previous slots in the same row\n                for(let k = j - 1; k >= 0; k--){\n                    const prevSlot = this.matrix[i][k];\n                    if (prevSlot !== null && slot.overlaps(prevSlot)) {\n                        console.log(prevSlot, slot);\n                        const prevX = prevSlot.rectangle.x;\n                        const prevWidth = prevSlot.rectangle.width;\n                        const prevEnd = prevX + prevWidth;\n                        const currEnd = x + width;\n                        if (prevEnd > x) {\n                            // Adjust the horizontal position of the current slot to avoid overlap\n                            x = prevEnd;\n                            width = currEnd - x;\n                        }\n                    }\n                }\n                slot.rectangle.x = x;\n                slot.rectangle.width = width;\n            }\n        }\n    }\n}\n\n\n\n\n\n\nvar $b743b85e9e68452d$exports = {};\n$b743b85e9e68452d$exports = JSON.parse('[{\"id\":\"1\",\"start\":\"2023-06-13T09:00:00\",\"end\":\"2023-06-13T09:35:00\"},{\"id\":\"4\",\"start\":\"2023-06-13T09:35:00\",\"end\":\"2023-06-13T10:00:00\"}]');\n\n\nconst $2b6e161c9edcf319$var$calendarDiv = document.getElementById(\"calendar\");\nconst $2b6e161c9edcf319$var$inputTextarea = document.getElementById(\"json\");\n$2b6e161c9edcf319$var$inputTextarea.value = JSON.stringify((0, (/*@__PURE__*/$parcel$interopDefault($b743b85e9e68452d$exports))), null, 2);\n$2b6e161c9edcf319$var$drawCalendar($2b6e161c9edcf319$var$calendarDiv, (0, (/*@__PURE__*/$parcel$interopDefault($b743b85e9e68452d$exports))));\n$2b6e161c9edcf319$var$inputTextarea.addEventListener(\"input\", (e)=>{\n    try {\n        const input = JSON.parse(e.target.value);\n        console.log(input.length);\n        $2b6e161c9edcf319$var$drawCalendar($2b6e161c9edcf319$var$calendarDiv, input);\n    } catch (error) {\n        console.error(error);\n    }\n});\nfunction $2b6e161c9edcf319$var$drawCalendar(element, input) {\n    element.innerHTML = \"\";\n    const instance = (width, _, events)=>new (0, $73dcc39c6e7bc2af$export$5b12bf1653c0dd85)(events, width);\n    calendar = new (0, $8743a11bd21c9c5c$export$e1aef45b828286de)($2b6e161c9edcf319$var$calendarDiv.clientWidth, element.clientHeight, input, instance);\n    calendar.draw($2b6e161c9edcf319$var$drawSlots(element));\n}\nfunction $2b6e161c9edcf319$var$drawSlots(element) {\n    return function(slot) {\n        const randomColor = ()=>{\n            return Math.floor(Math.random() * 255);\n        };\n        const div = document.createElement(\"div\");\n        div.style.backgroundColor = `rgba(${randomColor()}, ${randomColor()}, ${randomColor()}, 0.4)`;\n        div.style.padding = \"2px 0px 0px 2px\";\n        div.style.position = \"absolute\";\n        div.style.boxSizing = \"border-box\";\n        div.style.left = `${slot.rectangle.x}px`;\n        div.style.top = `${slot.rectangle.y}px`;\n        div.style.width = `${slot.rectangle.width}px`;\n        div.style.height = `${slot.rectangle.height}px`;\n        div.style.border = \"0.5px solid\";\n        div.style.fontSize = \"12px\";\n        div.innerText = `${slot.event.id} → ${$2b6e161c9edcf319$var$dateToString(slot.event.start)} to ${$2b6e161c9edcf319$var$dateToString(slot.event.end)}`;\n        element.append(div);\n    };\n}\nfunction $2b6e161c9edcf319$var$dateToString(date) {\n    return `${date.getHours()}:${date.getMinutes()}`;\n}\n// Side hours panel\nconst $2b6e161c9edcf319$var$hoursDiv = document.getElementById(\"hours\");\nfor(let i = 0; i < 24; i++){\n    let hour = i < 10 ? `0${i}` : i;\n    let div = $2b6e161c9edcf319$var$getHourDiv(hour);\n    $2b6e161c9edcf319$var$hoursDiv.append(div);\n}\nfunction $2b6e161c9edcf319$var$getHourDiv(hour) {\n    const div = document.createElement(\"div\");\n    div.style.padding = \"2px 0px 0px 2px\";\n    div.style.height = `60px`;\n    div.style.boxSizing = \"border-box\";\n    div.style.border = \"0.5px solid\";\n    div.innerText = `${hour}:00`;\n    return div;\n}\n\n\n//# sourceMappingURL=index.dac6f413.js.map\n","import {Calendar, Matrix} from '../../src'\r\nimport data from './input.json'\r\n\r\nconst calendarDiv = document.getElementById(\"calendar\");\r\nconst inputTextarea = document.getElementById(\"json\");\r\ninputTextarea.value = JSON.stringify(data, null, 2);\r\ndrawCalendar(calendarDiv, data);\r\n\r\ninputTextarea.addEventListener(\"input\", (e) => {\r\n    try {\r\n        const input = JSON.parse(e.target.value);\r\n        console.log(input.length);\r\n        drawCalendar(calendarDiv, input);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n});\r\n\r\nfunction drawCalendar(element, input) {\r\n    element.innerHTML = '';\r\n    const instance = (width, _, events) => new Matrix(events, width);\r\n    calendar = new Calendar(calendarDiv.clientWidth, element.clientHeight, input, instance);\r\n    calendar.draw(drawSlots(element));\r\n}\r\n\r\nfunction drawSlots(element) {\r\n    \r\n    return function (slot) {\r\n        const randomColor = () => {\r\n            return Math.floor(Math.random() * 255)\r\n        }\r\n        const div = document.createElement(\"div\")\r\n        div.style.backgroundColor = `rgba(${randomColor()}, ${randomColor()}, ${randomColor()}, 0.4)`;\r\n        div.style.padding = '2px 0px 0px 2px';\r\n        div.style.position = 'absolute';\r\n        div.style.boxSizing = 'border-box';\r\n        div.style.left = `${slot.rectangle.x}px`;\r\n        div.style.top = `${slot.rectangle.y}px`;\r\n        div.style.width = `${slot.rectangle.width}px`;\r\n        div.style.height = `${slot.rectangle.height}px`;\r\n        div.style.border = '0.5px solid';\r\n        div.style.fontSize = '12px'\r\n        div.innerText = `${slot.event.id} → ${dateToString(slot.event.start)} to ${dateToString(slot.event.end)}`;\r\n    \r\n        element.append(div);\r\n    }\r\n}\r\n\r\n\r\nfunction dateToString(date) {\r\n    return `${date.getHours()}:${date.getMinutes()}`;\r\n}\r\n\r\n// Side hours panel\r\n\r\nconst hoursDiv = document.getElementById(\"hours\");\r\n\r\nfor (let i = 0; i < 24; i++) {\r\n    let hour = i < 10 ? `0${i}` : i;\r\n    let div = getHourDiv(hour);\r\n    hoursDiv.append(div); \r\n}\r\n\r\nfunction getHourDiv(hour) {\r\n    const div = document.createElement(\"div\")\r\n    div.style.padding = '2px 0px 0px 2px';\r\n    div.style.height = `60px`;\r\n    div.style.boxSizing = 'border-box';\r\n    div.style.border = '0.5px solid';\r\n    div.innerText = `${hour}:00`;\r\n    return div;\r\n}","export { Calendar, Slot, Rectangle } from './event';\r\nexport { Matrix } from './layout';","import { ICalendar, IEvent, ILayout, IRectangle, ISlot } from \"./lib\";\r\n\r\nexport class Rectangle implements IRectangle {\r\n    x: number\r\n    y: number\r\n    width: number\r\n    height: number\r\n\r\n    constructor(x: number, y: number, width: number, height: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\nexport class Slot implements ISlot {\r\n    event: IEvent;\r\n    rows: number;\r\n    cols: number;\r\n    rectangle: IRectangle;\r\n\r\n    constructor(event: IEvent) {\r\n        this.event = event;\r\n        this.rows = 0;\r\n        this.cols = 0;\r\n        this.rectangle = new Rectangle(0, Slot.minute(event.start), 0, Slot.difference(event.start, event.end))\r\n    }\r\n\r\n    draw<T>(fn: (slot: ISlot) => T): T {\r\n        return fn(this)\r\n    }\r\n\r\n    overlaps(other: ISlot): boolean {\r\n        return (\r\n            (this.rectangle.x < other.rectangle.x + other.rectangle.width) &&\r\n            (this.rectangle.x + this.rectangle.width > other.rectangle.x) &&\r\n            (this.rectangle.y < other.rectangle.y + other.rectangle.height) &&\r\n            (this.rectangle.y + this.rectangle.height > other.rectangle.y)\r\n        );\r\n    }\r\n\r\n    static difference(start: Date, end: Date) {\r\n        return (end.getTime() - start.getTime()) / 1000 / 60;\r\n    }\r\n\r\n    static minute(date: Date) {\r\n        return (date.getHours() * 60 + date.getMinutes()) % 1440;\r\n    }\r\n\r\n}\r\n\r\nexport class Calendar implements ICalendar {\r\n    events: IEvent[];\r\n    width: number;\r\n    height: number;\r\n    instance: ILayout;\r\n\r\n    constructor(width: number, height: number, events: IEvent[], fn: (width: number, height: number, events: IEvent[]) => ILayout) {\r\n        this.events = events;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.instance = fn(this.width, this.height, this.events);\r\n    }\r\n\r\n    draw<T>(fn: (slot: ISlot) => T) {\r\n        this.instance.process()\r\n            .forEach(slot => slot.draw(fn));\r\n    }\r\n\r\n}","export { Matrix } from './matrix';","import { Slot } from \"../\";\r\nimport { ILayout, ISlot, IEvent } from \"../lib\";\r\n\r\nconst rows: number = 1440;\r\n\r\nexport class Matrix implements ILayout {\r\n    slots: ISlot[];\r\n    matrix: (ISlot | null)[][];\r\n\r\n    constructor(public events: IEvent[], public width: number) {\r\n        this.width = width\r\n        this.slots = events.map(e => {\r\n            return { ...e, start: new Date(e.start), end: new Date(e.end) }\r\n        }).sort((e1, e2) => e1.start.getTime() - e2.start.getTime())\r\n            .sort((e1, e2) => e1.end.getTime() - e2.end.getTime())\r\n            .map(e => new Slot(e));\r\n        this.matrix = this.#createMatrix(rows, this.slots.length);\r\n    }\r\n    process(): ISlot[] {\r\n\r\n        this.slots.forEach((slot, i) => this.#initMatrix(this.matrix, slot, i));\r\n        this.#setColumns()\r\n        this.#setVerticalPosition()\r\n\r\n        return this.slots;\r\n    }\r\n\r\n    #createMatrix(rows: number, cols: number): (ISlot | null)[][] {\r\n        const matrix: (ISlot | null)[][] = [];\r\n        for (let i = 0; i < rows; i++) {\r\n            matrix[i] = [];\r\n            for (let j = 0; j < cols; j++) {\r\n                matrix[i][j] = null;\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    #initMatrix(matrix: (ISlot | null)[][], slot: ISlot, i: number) {\r\n        const startDate = Slot.minute(slot.event.start);\r\n        const endDate = Slot.minute(slot.event.end);\r\n        slot.rows = endDate - startDate;\r\n        for (let t = startDate; t < endDate; t++) {\r\n            matrix[t][i] = slot;\r\n        }\r\n    }\r\n\r\n    #setColumns() {\r\n        let maxCol = 0;\r\n        for (let i = 0; i < this.matrix.length; i++) {\r\n            let count = this.matrix[i].filter(cell => cell !== null).length;\r\n            this.matrix[i]\r\n                .filter(slot => slot !== null)\r\n                .forEach(slot => slot!.cols = Math.max(slot!.cols, count))\r\n            if (count > maxCol) maxCol = count;\r\n            count = 0;\r\n        }\r\n        return maxCol;\r\n    }\r\n\r\n    #setVerticalPosition() {\r\n        this.matrix.forEach((slots, i) => {\r\n            let x = 0;\r\n            slots\r\n                .filter(slot => slot !== null)\r\n                .forEach(slot => {\r\n                    slot!.rectangle.x = Math.max(x, slot!.rectangle.x);\r\n                    slot!.rectangle.width = this.width / slot!.cols;\r\n                    x += slot!.rectangle.width;\r\n                });\r\n        });\r\n\r\n        this.#avoidOverlap();\r\n    }\r\n\r\n    #avoidOverlap() {\r\n        const rows = this.matrix.length;\r\n        const cols = this.matrix[0].length;\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                const slot = this.matrix[i][j];\r\n                if (slot) {\r\n                    let x = slot.rectangle.x;\r\n                    let width = slot.rectangle.width;\r\n\r\n                    // Check if the current slot overlaps with any previous slots in the same row\r\n                    for (let k = j - 1; k >= 0; k--) {\r\n                        const prevSlot = this.matrix[i][k];\r\n\r\n                        if (prevSlot !== null && slot.overlaps(prevSlot)) {\r\n                            console.log(prevSlot, slot);\r\n                            const prevX = prevSlot.rectangle.x;\r\n                            const prevWidth = prevSlot.rectangle.width;\r\n                            const prevEnd = prevX + prevWidth;\r\n                            const currEnd = x + width;\r\n                            if (prevEnd > x) {\r\n                                // Adjust the horizontal position of the current slot to avoid overlap\r\n                                x = prevEnd;\r\n                                width = currEnd - x;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    slot.rectangle.x = x;\r\n                    slot.rectangle.width = width;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","[\r\n    {\r\n         \"id\": \"1\",\r\n         \"start\": \"2023-06-13T09:00:00\",\r\n         \"end\": \"2023-06-13T09:35:00\"\r\n     },\r\n     {\r\n         \"id\": \"4\",\r\n         \"start\": \"2023-06-13T09:35:00\",\r\n         \"end\": \"2023-06-13T10:00:00\"\r\n     }\r\n ]"],"names":["$parcel$interopDefault","a","__esModule","default","$8743a11bd21c9c5c$export$4617fb02663045ef","constructor","x","y","width","height","$8743a11bd21c9c5c$export$8c6ed5c666ac1360","event","rows","cols","rectangle","minute","start","difference","end","draw","fn","overlaps","other","getTime","date","getHours","getMinutes","$8743a11bd21c9c5c$export$e1aef45b828286de","events","instance","process","forEach","slot","$73dcc39c6e7bc2af$export$5b12bf1653c0dd85","slots","map","e","Date","sort","e1","e2","matrix","createMatrix","length","i","initMatrix","setColumns","setVerticalPosition","j","startDate","endDate","t","maxCol","count","filter","cell","Math","max","avoidOverlap","k","prevSlot","console","log","prevX","prevWidth","prevEnd","currEnd","$b743b85e9e68452d$exports","JSON","parse","$2b6e161c9edcf319$var$calendarDiv","document","getElementById","$2b6e161c9edcf319$var$inputTextarea","$2b6e161c9edcf319$var$drawCalendar","element","input","innerHTML","calendar","clientWidth","clientHeight","_","randomColor","floor","random","div","createElement","style","backgroundColor","padding","position","boxSizing","left","top","border","fontSize","innerText","id","$2b6e161c9edcf319$var$dateToString","append","value","stringify","addEventListener","target","error","$2b6e161c9edcf319$var$hoursDiv","$2b6e161c9edcf319$var$getHourDiv","hour"],"version":3,"file":"index.dac6f413.js.map"}